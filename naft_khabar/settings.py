"""
Django settings for naft_khabar project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
load_dotenv()
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-lp9@@yfj=pnr$!4!9&#)o8z+)4m7aj(hrc)bhxa40ojxic4tsg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['admin.naftkhabar.com',
                 'dara.naftkhabar.com',
                  'naftkhabar.com',
                  'naftkhabar.news',
                  'localhost',
                  '127.0.0.1',
                  '192.168.1.10',
                  '65.109.189.219',
                  f'65.109.189.219:{os.environ.get('HOST_PORT', '8001')}'
                  ]

from corsheaders.defaults import default_headers

CORS_ALLOW_HEADERS = list(default_headers) + [
    'content-type',
]
cors_list = [
    'http://localhost:3000',
    'http://localhost:3001',
    'http://localhost:8000',
    f'http://localhost:{os.environ.get('HOST_PORT', '8001')}',
    'http://localhost:8005',
    'http://localhost:6573',

    'http://naftkhabar.com',
    'https://naftkhabar.com',
    'https://admin.naftkhabar.com',

    'http://naftkhabar.news',
    'https://naftkhabar.news',
    'http://192.168.1.10',
    'http://192.168.1.26',
    'http://65.109.189.219',
    f'http://65.109.189.219:{os.environ.get('HOST_PORT', '8001')}'
]
CORS_ALLOW_CREDENTIALS = True  # Allow credentials to be included with requests
CORS_ORIGIN_WHITELIST = cors_list  # Ensure this only lists allowed origins
CSRF_COOKIE_HTTPONLY = False  # CSRF cookie should be accessible via JavaScript
CSRF_COOKIE_SECURE = False  # Set to True for production HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'  # Allow cross-origin cookies; set to 'Lax' if unsure Lax for development and None for production
CSRF_TRUSTED_ORIGINS = cors_list  # List trusted origins for CSRF protection

# Application definition

INSTALLED_APPS = [
    # Default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'drf_yasg',
    'django_filters',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_extensions',

    # Custom Apps
    'accounts',
    'people',
    'management',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Should come first
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = 'accounts.User'

ROOT_URLCONF = 'naft_khabar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'naft_khabar.pagination.ConditionalPagination',
    'PAGE_SIZE': 5,
    'DEFAULT_RENDERER_CLASSES': (
        'naft_khabar.response.CustomJSONRenderer',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '3000/minute',
        'user': '30000/minute'
    }
}

SIMPLE_JWT = {
    # todo: fix it in production
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

WSGI_APPLICATION = 'naft_khabar.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import psycopg2
from django.db.utils import OperationalError

# Database initialization with environment variables
try:
    conn = psycopg2.connect(
        dbname=os.environ.get('POSTGRES_NAME', 'postgres'),  # Connect to default DB first
        user=os.environ.get('POSTGRES_USER', 'postgres'),
        password=os.environ.get('POSTGRES_PASSWORD', ''),
        host=os.environ.get('POSTGRES_HOST', 'db'),
        port=os.environ.get('POSTGRES_PORT', '5432')
    )
    conn.autocommit = True
    
    # Create database if not exists
    with conn.cursor() as cursor:
        cursor.execute(f"SELECT 1 FROM pg_database WHERE datname = '{os.environ.get('POSTGRES_NAME', 'naft_khabar')}'")
        if not cursor.fetchone():
            cursor.execute(f"CREATE DATABASE {os.environ.get('POSTGRES_NAME', 'naft_khabar')}")
    
    # Connect to target database to create schema
    conn = psycopg2.connect(
        dbname=os.environ.get('POSTGRES_NAME', 'naft_khabar'),
        user=os.environ.get('POSTGRES_USER', 'postgres'),
        password=os.environ.get('POSTGRES_PASSWORD', ''),
        host=os.environ.get('POSTGRES_HOST', 'db'),
        port=os.environ.get('POSTGRES_PORT', '5432')
    )
    conn.autocommit = True
    with conn.cursor() as cursor:
        cursor.execute("CREATE SCHEMA IF NOT EXISTS esmesh_chie")
    conn.close()
except OperationalError as e:
    print(f"Database initialization error: {e}")
except psycopg2.Error as e:
    print(f"PostgreSQL error: {e}")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
        'OPTIONS': {
            'options': '-c search_path=esmesh_chie,public',
            'client_encoding': 'UTF8'
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static_files')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
